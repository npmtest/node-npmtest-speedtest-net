{"/home/travis/build/npmtest/node-npmtest-speedtest-net/test.js":"/* istanbul instrument in package npmtest_speedtest_net */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-speedtest-net/lib.npmtest_speedtest_net.js":"/* istanbul instrument in package npmtest_speedtest_net */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_speedtest_net = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_speedtest_net = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-speedtest-net/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-speedtest-net && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_speedtest_net */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_speedtest_net\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_speedtest_net.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_speedtest_net.rollup.js'] =\n            local.assetsDict['/assets.npmtest_speedtest_net.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_speedtest_net.__dirname + '/lib.npmtest_speedtest_net.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-speedtest-net/node_modules/speedtest-net/index.js":"/*\n\nSpeedtest.net client.\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Han de Boer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n'use strict';\n\nvar parseXML     = require('xml2js').parseString\n  , url          = require('url')\n  , EventEmitter = require('events').EventEmitter\n  ;\n\n// These numbers were obtained by measuring and averaging both using this module and the official speedtest.net\nvar speedTestDownloadCorrectionFactor = 1.135\n  , speedTestUploadCorrectionFactor   = 1.139\n  ;\n\nfunction once(callback) {\n  if (typeof callback !== \"function\") {\n    callback = function() {};\n  }\n  return function() {\n    if (callback) {\n      callback.apply(this, arguments);\n      callback = null;\n    }\n  }\n}\n\nfunction distance(origin, destination) {\n\n  function deg2rad(d) {\n    return d / 180 * Math.PI;\n  }\n\n  var lat1   = origin.lat\n    , lon1   = origin.lon\n    , lat2   = destination.lat\n    , lon2   = destination.lon\n    , radius = 6371 //km\n    , dlat   = deg2rad(lat2 - lat1)\n    , dlon   = deg2rad(lon2 - lon1)\n    , a\n    , c\n    ;\n\n  a = (Math.sin(dlat / 2) * Math.sin(dlat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dlon / 2) * Math.sin(dlon / 2));\n  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  return radius * c;\n}\n\n\nfunction getHttp(theUrl, discard, callback) {\n\n  if (!callback) {\n    callback = discard;\n    discard = false;\n  }\n\n  callback = once(callback);\n\n  var options = theUrl;\n\n  if (typeof options == \"string\") options = url.parse(options);\n\n  var http = options.protocol == 'https:' ? require('https') : require('http');\n  delete options.protocol;\n\n  options.headers = options.headers || {};\n  options.headers['user-agent'] = options.headers['user-agent'] || 'Mozilla/5.0 (Windows NT 6.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.' + Math.trunc(Math.random()*400 + 2704) + '.' + Math.trunc(Math.random()*400 + 103) + ' Safari/537.36';\n\n  http.get(options, function(res) {\n    if ( res.statusCode === 302 ) {\n      return getHttp(res.headers.location, discard, callback)\n    }\n    var data = ''\n      , count = 0\n      ;\n\n    if (!discard) res.setEncoding('utf8');\n    res.on('error', callback);\n    res.on('data', function(newData) {\n      count += newData.length;\n      if (!discard) data += newData;\n    });\n    res.on('end', function() {\n      if (discard) data = count;\n      callback(null, data, res.statusCode);\n    });\n  }).on('error', callback);\n\n}\n\nfunction postHttp(theUrl, data, callback) {\n\n  if (!callback) {\n    callback = data;\n    data = '';\n  }\n\n  callback = once(callback);\n\n  var options = theUrl\n    , http\n    , req\n    ;\n\n  if (typeof options == \"string\") options = url.parse(options);\n\n  options.headers = options.headers || {};\n  options.headers['user-agent'] = options.headers['user-agent'] || 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:24.0) Gecko/20100101 Firefox/24.0';\n  options.headers['content-type'] = 'application/x-www-form-urlencoded';\n  options.headers['content-length'] = data.length;\n  options.method = \"POST\";\n\n  http = require(options.protocol == 'https:' ? 'https' : 'http');\n  delete options.protocol;\n\n  req = http.request(options, function(res) {\n    var data = '';\n    res.setEncoding('utf8');\n    res.on('error', callback);\n    res.on('data', function(newData) {\n      data += newData;\n    });\n    res.on('end', function() {\n      callback(null, data, res.statusCode);\n    });\n  });\n\n  req.on('error', callback);\n\n  req.end(data);\n\n}\n\nfunction randomPutHttp(theUrl, size, callback) {\n  callback = once(callback);\n\n  size = (size || 131072) | 0;\n\n  var options = theUrl\n    , headers = {\n        'user-agent':     'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:24.0) Gecko/20100101 Firefox/24.0',\n        'content-length': size\n      }\n    , toSend  = size\n    , sent1   = false\n    , dataBlock\n    , http\n    ;\n\n  if (typeof options === \"string\") options = url.parse(theUrl);\n\n\n  options.headers = options.headers || {};\n\n  for (var h in headers) {\n    options.headers[h] = options.headers[h] || headers[h];\n  }\n\n  options.method = 'POST';\n\n  dataBlock = (function() {\n    var d = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    while (d.length < 1024 * 16) d += d;\n    return d.substr(0, 1024 * 16);\n  }());\n\n  http = options.protocol == 'https:' ? require('https') : require('http');\n\n  delete options.protocol;\n\n  var req = http.request(options, function(res) {\n    var data = '';\n    res.on('error', callback);\n    res.on('data', function(newData) {\n      //discard\n    });\n    res.on('end', function() {\n      // Some cases (like HTTP 413) will interrupt the upload, but still return a response\n      callback(null, size - toSend);\n    });\n  });\n\n  req.on('error', callback);\n\n  function write() {\n    do {\n      if (!toSend) {\n        return; //we're done sending...\n      }\n      var data = dataBlock;\n      if (!sent1) {\n        sent1 = true;\n        data = 'content1=' + data;\n      }\n      data = data.substr(0, toSend);\n      toSend -= data.length;\n    } while (req.write(data));\n  }\n\n  req.on('drain', write);\n\n  write();\n}\n\nfunction getXML(xmlurl, callback) {\n\n  callback = once(callback);\n\n  getHttp(xmlurl, function(err, data) {\n    if (err) return callback(err);\n    parseXML(data, function(err, xml) {\n      if (err) return callback(err);\n      callback(null, xml);\n    });\n  });\n\n}\n\nfunction pingServer(server, callback) {\n  callback = once(callback);\n\n  var tot = 3\n    , done = 0\n    , bestTime = 3600\n    ;\n\n  function nextPing() {\n    var start = process.hrtime()\n      , complete\n      ;\n\n    setTimeout(function() {\n      if (!complete) {\n        complete = true;\n        return callback(new Error(\"Ping timeout\"));\n      }\n    }, 5000);\n\n    getHttp(url.resolve(server.url, 'latency.txt'), function(err, data) {\n      if (complete) return; // already hit timeout\n      complete = true;\n      var diff = process.hrtime(start);\n      diff = diff[0] + diff[1] * 1e-9; //seconds\n      if (!err && data.substr(0, 9) !== 'test=test') err = new Error('Unknown latency file');\n      if (err) diff = 3600; //an hour...\n      if (diff < bestTime) bestTime = diff;\n      done++;\n      if (done == tot) {\n        if (bestTime >= 3600) return callback(new Error(\"Ping failed\"));\n        return callback(null, bestTime * 1000); //ms\n      } else {\n        nextPing();\n      }\n    });\n  }\n\n  nextPing();\n}\n\nfunction pingServers(servers, count, callback) {\n  var result = []\n    , todo = Math.min(count, servers.length)\n    , done = 0\n    ;\n\n  for (var n = 0; n < todo; n++) {\n    (function(server) {\n      result.push(server);\n      server.bestPing = 3600;\n      pingServer(server, function(err, bestTime) {\n        if (bestTime < 10 && server.dist < 2) { //too close! Same datacenter? upload speeds of several GB/s ?? Bad measurment...\n          bestTime = 100;\n        }\n        if (err) {\n          server.bestPing = 3600;\n        } else {\n          server.bestPing = bestTime;\n        }\n        done++;\n        if (done == todo) {\n          result.sort(function(a, b) {\n            return a.bestPing - b.bestPing;\n          });\n          callback(null, result);\n        }\n      });\n    }(servers[n]));\n  }\n  if (todo == 0) setImmediate(callback, null, []);\n}\n\nfunction downloadSpeed(urls, maxTime, callback) {\n\n  callback = once(callback);\n\n  var concurrent = 2\n    , running = 0\n    , started = 0\n    , done = 0\n    , todo = urls.length\n    , totalBytes = 0\n    , emit\n    , timeStart\n    ;\n\n  maxTime = (maxTime || 10000) / 1000;\n\n  if (this.emit) {\n    emit = this.emit.bind(this);\n  } else {\n    emit = function() {};\n  }\n\n  next();\n\n  timeStart = process.hrtime();\n\n  function next() {\n    if (started >= todo) return; //all are started\n    if (running >= concurrent) return;\n    running++;\n\n    var starting = started\n      , url      = urls[starting]\n      ;\n\n    started++;\n\n    getHttp(url, true, function(err, count) { //discard all data and return byte count\n      var diff = process.hrtime(timeStart)\n        , timePct\n        , amtPct\n        , speed\n        , fixed\n        ;\n\n      diff = diff[0] + diff[1] * 1e-9; //seconds\n\n      running--;\n      totalBytes += count;\n      done++;\n      speed = totalBytes / diff;\n      fixed = speed * speedTestDownloadCorrectionFactor / 125000;\n\n      timePct = diff / maxTime * 100;\n      // amtPct=done/todo*100;\n      amtPct = 0; //time-only\n\n      if (diff > maxTime) {\n        done = todo;\n      }\n      if (done <= todo) {\n        emit('downloadprogress', Math.round(Math.min(Math.max(timePct, amtPct), 100.0) * 10) / 10);\n        emit('downloadspeedprogress', fixed)\n      }\n      if (done >= todo) {\n        callback(null, speed); //bytes/sec\n      } else {\n        next();\n      }\n    });\n\n    next(); //Try another\n  }\n}\n\nfunction uploadSpeed(url, sizes, maxTime, callback) {\n\n  callback = once(callback);\n\n  var concurrent = 2\n    , running = 0\n    , started = 0\n    , done = 0\n    , todo = sizes.length\n    , totalBytes = 0\n    , emit\n    , timeStart\n    ;\n\n  maxTime = (maxTime || 10000) / 1000;\n\n  if (this.emit) {\n    emit = this.emit.bind(this);\n  } else {\n    emit = function() {};\n  }\n\n  next();\n\n  timeStart = process.hrtime();\n\n  function next() {\n    if (started >= todo) return; //all are started\n    if (running >= concurrent) return;\n    running++;\n    var starting = started\n      , size     = sizes[starting]\n      ;\n\n    started++;\n    //started=(started+1) % todo; //Keep staing more until the time is up...\n\n    randomPutHttp(url, size, function(err, count) { //discard all data and return byte count\n      if (done >= todo) return;\n      if (err) {\n        count = 0;\n      }\n      var diff = process.hrtime(timeStart)\n        , timePct\n        , amtPct\n        , speed\n        , fixed\n        ;\n\n      diff = diff[0] + diff[1] * 1e-9; //seconds\n\n      running--;\n      totalBytes += count;\n      done++;\n      speed = totalBytes / diff;\n      fixed = speed * speedTestUploadCorrectionFactor / 125000;\n\n      timePct = diff / maxTime * 100;\n      amtPct = done / todo * 100;\n      //amtPct=0; //time-only\n\n      if (diff > maxTime) {\n        done = todo;\n      }\n      if (done <= todo) {\n        emit('uploadprogress', Math.round(Math.min(Math.max(timePct, amtPct), 100.0) * 10) / 10);\n        emit('uploadspeedprogress', fixed)\n      }\n      if (done >= todo) {\n        callback(null, speed); //bytes/sec\n      } else {\n        next();\n      }\n    });\n\n    next(); //Try another\n  }\n}\n\nfunction speedTest(options) {\n\n  options = options || {};\n\n  options.maxTime = options.maxTime || 10000;\n  options.pingCount = options.pingCount || (options.serverId ? 1 : 5);\n  options.maxServers = options.maxServers || 1;\n\n  var self = new EventEmitter()\n    , speedInfo = {}\n    , serversUrls = [\n        'http://www.speedtest.net/speedtest-servers-static.php',\n        'http://www.speedtest.net/speedtest-servers-static.php?really=yes',\n        'https://www.speedtest.net/speedtest-servers-static.php',\n        'https://www.speedtest.net/speedtest-servers-static.php?really=totally',\n        'http://www.speedtest.net/speedtest-servers.php',\n        'http://www.speedtest.net/speedtest-servers.php?really=sure',\n        'https://www.speedtest.net/speedtest-servers.php',\n        'https://www.speedtest.net/speedtest-servers.php?really=absolutely'\n      ]\n    , curServer = 0\n    , serversUrl\n    ;\n\n  function httpOpts(theUrl) {\n    var o = url.parse(theUrl);\n    o.headers = options.headers || {};\n    return o;\n  }\n\n  //Fetch config\n\n  getXML(httpOpts('http://www.speedtest.net/speedtest-config.php'), gotConfig);\n\n  function gotConfig(err, config) {\n    if (err) return self.emit('error', err);\n    config = config && config.settings || {};\n\n    function get(name) {\n      return ((config[name] || [])[0] || {}).$ || {}\n    }\n\n    var client   = get('client')\n      , times    = get('times')\n      , download = get('download')\n      , upload   = get('upload')\n      ;\n\n    speedInfo.config = {client: client, times: times, download: download, upload: upload};\n\n    self.emit('config', speedInfo.config);\n    gotData();\n  }\n\n  if (options.serversUrl) {\n    serversUrl = options.serversUrl;\n    curServer = -1;\n  }\n\n  function nextServer(err) {\n    if (curServer >= serversUrls.length) {\n      return self.emit('error', err || new Error('There was a problem getting the list of servers from SpeedTest.net. Consider using a custom serversUrl'));\n    }\n    if (curServer < 0) {\n      curServer = serversUrls.length;\n    } else {\n      serversUrl = serversUrls[curServer];\n      curServer++;\n    }\n    getXML(httpOpts(serversUrl), gotServers);\n  }\n\n  nextServer();\n\n  function gotServers(err, servers) {\n    if (err || !servers) return nextServer(err);\n    var s = servers.settings.servers[0].server;\n\n    servers = [];\n    for (var n = 0; n < s.length; n++) {\n      if (options.serverId && s[n].$.id == options.serverId) {\n        servers = [s[n].$];\n        break;\n      }\n      servers.push(s[n].$);\n    }\n\n    speedInfo.servers = servers;\n\n    self.emit('servers', servers);\n    gotData()\n  }\n\n  function gotData() {\n    if (!speedInfo.config || !speedInfo.servers) return; //not ready yet\n\n    //order servers by how close they are:\n    var servers = speedInfo.servers;\n\n    for (var n = 0; n < servers.length; n++) {\n      var server = servers[n]\n        , dist   = distance(speedInfo.config.client, server)\n        ;\n\n      server.dist = dist;\n      server.distMi = dist * 0.621371;\n    }\n\n    servers.sort(function(a, b) {\n      return (a.dist - b.dist);\n    });\n\n    pingServers(servers, options.pingCount, function(err, bestServers) {\n      if (!bestServers || !bestServers.length) return self.emit('error', new Error('Could not find a server to test on.'));\n\n      speedInfo.bestServers = bestServers;\n      speedInfo.bestServer = speedInfo.bestServers[0];\n      self.emit('bestservers', bestServers);\n\n      startDownload();\n    });\n  }\n\n  function startDownload(ix) {\n    ix = ix || 0;\n    if (ix >= speedInfo.bestServers.length || ix >= options.maxServers) return startUpload();\n    var server = speedInfo.bestServers[ix]\n      , svrurl = server.url\n      , sizes  = [350, 500, 750, 1000, 1500, 2000, 2500, 3000, 3500, 4000]\n      , urls   = []\n      , n\n      , i\n      , size\n      ;\n\n    for (n = 0; n < sizes.length; n++) {\n      size = sizes[n];\n      for (i = 0; i < 4; i++) {\n        urls.push(url.resolve(svrurl, 'random' + size + 'x' + size + '.jpg'));\n      }\n    }\n\n    self.emit('testserver', server);\n\n    downloadSpeed.call(self, urls, options.maxTime, function(err, speed) {\n      var fixed = speed * speedTestDownloadCorrectionFactor / 125000;\n      self.emit('downloadprogress', 100);\n      self.emit('downloadspeed', fixed);\n\n      if (speedInfo.downloadSpeed) {\n        if (speed > speedInfo.downloadSpeed) {\n          speedInfo.downloadSpeed = speed;\n          speedInfo.speedTestDownloadSpeed = fixed;\n          speedInfo.bestServer = server;\n        }\n      } else {\n        speedInfo.downloadSpeed = speed;\n        speedInfo.speedTestDownloadSpeed = fixed;\n      }\n\n      startDownload(ix + 1);\n    });\n\n  }\n\n  function startUpload() {\n\n    var sizes     = []\n      , sizesizes = [\n          Math.round(0.25 * 1000 * 1000),\n          Math.round(0.5 * 1000 * 1000),\n          Math.round(1 * 1000 * 1000),\n          Math.round(2 * 1000 * 1000),\n          Math.round(4 * 1000 * 1000),\n          Math.round(8 * 1000 * 1000),\n          Math.round(16 * 1000 * 1000),\n          Math.round(32 * 1000 * 1000)\n        ]\n      , sizesize\n      , n\n      , i\n      ;\n\n    for (n = 0; n < sizesizes.length; n++) {\n      sizesize = sizesizes[n];\n      for (i = 0; i < 25; i++) {\n        sizes.push(sizesize);\n      }\n    }\n    self.emit('testserver', speedInfo.bestServer);\n    uploadSpeed.call(self, speedInfo.bestServer.url, sizes, options.maxTime, function(err, speed) {\n      var fixed = speed * speedTestUploadCorrectionFactor / 125000;\n      self.emit('uploadprogress', 100);\n      self.emit('uploadspeed', fixed);\n\n      speedInfo.uploadSpeed = speed;\n      speedInfo.speedTestUploadSpeed = fixed;\n\n\n      //emit results as nice, clean, object\n\n      /*\n      { url: 'http://208.54.87.70/speedtest/upload.jsp',\n        lat: '40.9419',\n        lon: '-74.2506',\n        name: 'Wayne, NJ',\n        country: 'United States',\n        cc: 'US',\n        sponsor: 'T-Mobile',\n        id: '1861',\n        host: '208.54.87.70:8080',\n        dist: 114.3911751633326,\n        bestPing: 37.36689500000001 }\n      */\n\n      function num(name) {\n        speedInfo.config.client[name] = parseFloat(speedInfo.config.client[name]);\n      }\n\n      num('lat');\n      num('lon');\n      num('isprating');\n      num('rating');\n      num('ispdlavg');\n      num('ispulavg');\n\n      delete speedInfo.config.client.loggedin; //We're never logged in, so this is useless.\n\n      //Convert to megabits/s\n      speedInfo.config.client.ispdlavg /= 1000;\n      speedInfo.config.client.ispulavg /= 1000;\n\n      var best = speedInfo.bestServer\n        , data = {\n            speeds: {\n              //Rounding, because these numbers look way more accurate than they are...\n              download:         Math.round(speedInfo.speedTestDownloadSpeed * 1000) / 1000,\n              upload:           Math.round(speedInfo.speedTestUploadSpeed * 1000) / 1000,\n              originalDownload: Math.round(speedInfo.downloadSpeed),\n              originalUpload:   Math.round(speedInfo.uploadSpeed)\n            },\n            client: speedInfo.config.client,\n            server: {\n              host:       url.parse(best.url).host,\n              lat:        +best.lat,\n              lon:        +best.lon,\n              location:   best.name,\n              country:    best.country,\n              cc:         best.cc,\n              sponsor:    best.sponsor,\n              distance:   Math.round(best.dist * 100) / 100,\n              distanceMi: Math.round(best.distMi * 100) / 100,\n              ping:       Math.round(best.bestPing * 10) / 10,\n              id:         best.id\n            }\n          }\n        ;\n\n      self.emit('data', data);\n      postResults();\n    });\n  }\n\n  function postResults() {\n    var best      = speedInfo.bestServer\n      , md5       = function(v) {\n          return require('crypto').createHash('md5').update(v).digest('hex')\n        }\n      , dlspeedk  = Math.round(speedInfo.speedTestDownloadSpeed * 1000)\n      , ulspeedk  = Math.round(speedInfo.speedTestUploadSpeed * 1000)\n      , ping      = Math.round(best.bestPing)\n      , res       = [\n          'download', dlspeedk,\n          'ping', ping,\n          'upload', ulspeedk,\n          'promo', '',\n          'startmode', 'pingselect', //or flyok, recommendedselect\n          'recommendedserverid', best.id,\n          'accuracy', 1,\n          'serverid', best.id,\n          'hash', md5(ping + '-' + ulspeedk + '-' + dlspeedk + '-297aae72')\n        ]\n      , reportUrl = 'http://www.speedtest.net/api/api.php'\n      , prms      = []\n      , opts\n      , n\n      ;\n\n    for (n = 0; n < res.length; n += 2) {\n      prms.push(res[n] + '=' + encodeURIComponent(res[n + 1]));\n    }\n\n    opts = httpOpts(reportUrl);\n\n    opts.headers.referer = 'http://c.speedtest.net/flash/speedtest.swf';\n\n    postHttp(opts, prms.join('&'), function(err, data, status) {\n      var match = ('' + data).match(/^resultid=(\\d+)(&|$)/), resultUrl;\n      if (status == 200 && match && match[1]) { //I get '0', don't know why. No one knows why.\n        resultUrl = 'http://www.speedtest.net/result/' + match[1] + '.png';\n      }\n\n      speedInfo.resultUrl = resultUrl;\n\n      self.emit('result', resultUrl);\n      self.emit('done', speedInfo);\n    });\n  }\n\n  return self;\n\n}\n\nmodule.exports = speedTest;\n\nfunction visualSpeedTest(options, callback) {\n  // We only need chalk and DraftLog here. Lazy load it.\n  var chalk = require('chalk');\n  require('draftlog').into(console);\n\n  callback = once(callback);\n\n  var test = speedTest(options)\n    , log  = function() {}\n    , finalData\n    , percentage = 0\n    , speed = 0\n    , bar = console.draft()\n    ;\n\n  if (options.log) {\n    if (typeof options.log === \"function\") {\n      log = options.log;\n    } else {\n      log = console.log.bind(console);\n    }\n  }\n\n  test.on('error', function(err) {\n    callback(err);\n  });\n\n  test.on('testserver', function(server) {\n    log('Using server by ' + server.sponsor + ' in ' + server.name + ', ' + server.country + ' (' + (server.distMi * 0.621371).toFixed(0) + 'mi, ' + (server.bestPing).toFixed(0) + 'ms)');\n  });\n\n  test.on('config', function(config) {\n    var client = config.client;\n    log('Testing from ' + client.ip + ' at ' + client.isp + ', expected dl: ' + (client.ispdlavg / 8000).toFixed(2) + 'MB/s, expected ul: ' + (client.ispulavg / 8000).toFixed(2) + 'MB/s');\n  });\n\n  var size = 50;\n  var red = (chalk.supportsColor ? chalk.bgRed(' ') : '─');\n  var green = (chalk.supportsColor ? chalk.bgGreen(' ') : '▇');\n\n  function prog(what, pct, spd) {\n    percentage = pct || percentage;\n    speed = spd || speed;  \n\n    var complete = Math.round(percentage / 100 * size);\n    var barStr = '';\n    \n    // What + padding\n    barStr += what;\n    barStr += ' '.repeat(12 - what.length);\n\n    // Bar\n    barStr += green.repeat(complete);\n    barStr += red.repeat(size - complete);\n\n    // Percent\n    pct = percentage + '%';\n    barStr += ' ' + pct;\n\n    // Speed\n    barStr += ' '.repeat(8 - pct.length) + speed;\n\n    bar(barStr);\n  }\n\n  test.on('downloadprogress', function(pct) {\n    prog('download', pct, null);\n  });\n\n  test.on('uploadprogress', function(pct) {\n    prog('upload', pct, null);\n  });\n\n  test.on('downloadspeed', function(speed) {\n    log('Download speed: ', speed.toFixed(2) + 'Mbps');\n\n    // Create a new line after each new download\n    bar = console.draft();\n  });\n\n  test.on('uploadspeed', function(speed) {\n    log('Upload speed: ', speed.toFixed(2) + 'Mbps');\n\n    // Create a new line after each new upload\n    bar = console.draft();\n  });\n\n  test.on('downloadspeedprogress', function(speed) {\n    prog('download', null, speed.toFixed(2) + 'Mbps')\n  });\n\n  test.on('uploadspeedprogress', function(speed) {\n    prog('upload', null, speed.toFixed(2) + 'Mbps')\n  });\n\n  test.on('data', function(data) {\n    finalData = data;\n  });\n\n  test.on('result', function(url) {\n    log('Results url: ' + url);\n  });\n\n  test.on('done', function(data) {\n    callback(null, finalData);\n  });\n\n  return test;\n}\n\nspeedTest.visual = visualSpeedTest;\n","/home/travis/build/npmtest/node-npmtest-speedtest-net/node_modules/speedtest-net/bin/index.js":"#!/usr/bin/env node\nrequire('draftlog').into(console).addLineListener(process.stdin);\nvar chalk = require('chalk');\nvar SpeedTestNet = require('../');\n\n/*\n * Keep track of current UI State\n */\nvar header, speeds, locate;\nvar step = 'Ping';\nvar statuses = {\n  Ping: true,\n  Download: false,\n  Upload: false,\n};\n\n/*\n * Renders the header and Speeds (one below the other)\n */\nvar width = 24;\nfunction updateLines() {\n  var spinner = Spinner();\n  var headerTxt = renderHeader(statuses, step);\n  var speedsTxt = renderStatus(statuses, step, spinner);\n\n  header('│' + headerTxt + '│');\n  speeds('│' + speedsTxt + '│');\n}\n\n/*\n * Renders the Header (Showing PING DOWNLOAD UPLOAD) with it's colors and spacings\n */\nfunction renderHeader(statuses) {\n  var txt = '';\n\n  // Build Header\n  for (var k in statuses) {\n    var status = statuses[k];\n\n    // Create header\n    var col = centerText(k, width);\n\n    // Set header status color\n    if (status === false) {\n      col = chalk.dim(col);\n    } else {\n      col = chalk.white(col);\n    }\n\n    txt += col;\n  }\n\n  return txt;\n}\n\n/*\n * Renders the Status line (Showing Ping/Download/Upload results) with it's colors and spacings\n */\nfunction renderStatus(statuses, step, spinner){\n  var txt = '';\n\n   // Build Status\n  for (var k in statuses) {\n    var status = statuses[k];\n    \n    // Account for status where it's false/true\n    // (indicating not started and not received value yet)\n    status = status === false ? '' : status;\n    status = status === true  ? '' : status;\n    status = status + '';\n\n    // Put spinner if no info\n    if (!status) {\n      status = spinner + ' ';\n    }\n\n    // Create status text\n    status = centerText(status, width);\n\n    // Dim unitis\n    status = status.replace(/(Mbps|ms)/gi, chalk.dim('$1'));\n\n    // If it's the current step, show as yellow\n    if (step == k) {\n      status = chalk.yellow(status);\n    } else {\n      status = chalk.blue(status);\n    }\n\n    txt += status;\n  }\n\n  return txt;\n}\n\n/*\n * Pad Left/Right with same amount of spaces n times. compensate for odd numbers\n */\nfunction centerText(text, n, length) {\n  // Account for text length first\n  n -= length || text.length;\n\n  // Pad to be even\n  if (n % 2 == 1) {\n    text = ' ' + text;\n  }\n\n  // Round n to lowest number\n  n = Math.floor(n / 2);\n\n  // Make spacer\n  var spacer = ' '.repeat(n);\n\n  // Fill in text\n  return spacer + text + spacer;\n}\n\n/*\n * Converts a number to speed (in Mbps)\n */\nfunction speedText(speed) {\n  // Depending on the speed, show more places\n  var places = ( speed < 2 ? 3 : 1);\n\n  // Make it fixed\n  var str = speed.toFixed(places);\n  \n  // Concat with unit\n  return str + ' Mbps';\n}\n\n/*\n * Function that return state of Spinner, and change its state with time\n */\nvar frames = [\n  '+---',\n  '-+--',\n  '--+-',\n  '---+',\n  '--+-',\n  '-+--',\n];\nvar lastChange = 0;\nfunction Spinner(){\n  if (Date.now() > lastChange + 30) {\n    frames.unshift(frames.pop());\n    lastChange = Date.now();\n  }\n  return frames[0];\n}\n\n/*\n * Shows CLI UI\n */\nconsole.log();\nconsole.log('┌' + '─'.repeat(width * 3) + '┐');\nconsole.log('│' + ' '.repeat(width * 3) + '│');\nlocate = console.draft('│' + ' '.repeat(width * 3) + '│');\nconsole.log('│' + ' '.repeat(width * 3) + '│');\nheader = console.draft();\nspeeds = console.draft();\nconsole.log('│' + ' '.repeat(width * 3) + '│');\nconsole.log('│' + ' '.repeat(width * 3) + '│');\nconsole.log('└' + '─'.repeat(width * 3) + '┘');\nconsole.log();\nconsole.log();\n\nupdateLines();\n\n/*\n * Start speed test\n */\nvar test = SpeedTestNet({maxTime: 10000});\nvar interval = setInterval(updateLines, 100);\nvar completedUpload = false;\nvar completedDownload = false;\n\ntest.on('downloadspeedprogress', function (speed){\n  if (!completedDownload) {\n    statuses.Download = speedText(speed);\n  }\n});\n\ntest.on('uploadspeedprogress', function (speed){\n  if (!completedUpload) {\n    statuses.Upload = speedText(speed);\n  }\n});\n\ntest.once('testserver', function (info){\n  // Round to 1 decimal place\n  var title = info.sponsor + ', ' + info.country + ' - ' + info.name;\n  title = centerText(title, width * 3);\n\n  locate('│' + chalk.yellow(title) + '│');\n  \n  var ping = Math.round(info.bestPing * 10) / 10;\n  statuses.Ping = ping + ' ms';\n  step = 'Download';\n});\n\ntest.once('downloadspeed', function (speed){\n  completedDownload = true;\n  step = 'Upload';\n  statuses.Download = speedText(speed);\n});\n\ntest.once('uploadspeed', function (speed){\n  completedUpload = true;\n  step = 'Finished';\n  statuses.Upload = speedText(speed);\n});\n\ntest.on('done', function () {\n  process.exit(0);\n});\n\ntest.on('error', err => {\n  console.log();\n  console.error(chalk.red(err));\n  console.log();\n  process.exit(1);\n});\n"}